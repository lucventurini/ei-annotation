import sys
import os
import glob
import itertools
import subprocess
import yaml
from os import listdir
from os.path import isfile, join
from shutil import which
import functools
from eiannotation.rnaseq.utils import *
from .sample import Sample  # They should have been defined upstream
from .asm_run import AsmRuns
from .alignment_run import AlignmentRuns

CFG=workflow.overwrite_configfile

# Basics
snakedir = os.path.asbpath(os.path.dirname(__name__))
NAME = config.get("name", "eiannot")
OUT_DIR = config.get("out_dir", "eiannot")
THREADS = int(config.get("threads", 1))

# Short read fields
R1 = []
R2 = []
SAMPLES = []
STRANDEDNESS = []
if "short_reads" in config:
	R1 = config["short_reads"]["r1"]
	R2 = config["short_reads"]["r2"]
	SAMPLES = config["short_reads"]["samples"]
	STRANDEDNESS = config["short_reads"]["strandedness"]

# Create Samples


subworkflow align:
  workdir: OUT_DIR
	snakefile: os.path.join(snakedir, "alignments", "align.smk")

subworkflow assemble:
  workdir: OUT_DIR
  snakefile: os.path.join(snakedir, "assemblies", "assemblies.smk")

# __init__(self, align_methods, outdir, samples: dict[Sample]):
config["__private"]["alignment_runs"] = AlignmentRuns(config["align_methods"],
                                                      os.path.join(OUT_DIR, "2-alignments", "output"),
                                                      config["__private"]["samples"])

# __init__(self, methods, asm_dir, aln_runs: AlignmentRuns)
config["__private"]["asm_runs"] = AsmRuns(config["asm_methods"],
                                          os.path.join(OUT_DIR, "3-assemblies", "output"),
                                          config["__private"]["alignment_runs"])

rule all:
	input:
		mikado=OUT_DIR + "/mikado.yaml",
		align=ALIGN_DIR+"/alignment.stats",
		#l_align=ALIGN_DIR+"/lr_alignment.stats",
		asm=ASM_DIR+"/assembly.stats"

rule clean:
	shell: "rm -rf {OUT_DIR}"
