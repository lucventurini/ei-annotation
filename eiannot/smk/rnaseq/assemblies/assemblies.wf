import funcALIGNMENT_METHODS
import subprocess
import re
import os
from eicore.external_process.snakemake_helper import loadPreCmd
from .utils import *
import snakemake
from collections import namedtuple
from collections import OrderedDict as odict


class Sample:

    valid_strands = [None]

    def __init__(self, sample, read1, read2, is_long, strandedness):

        self.__sample = sample
        if read1 is None or not read1:
            raise ValueError("Read1 must be defined!")
        self.__read1 = read1
        self.__read2 = read2
        if not isinstance(is_long, bool):
            raise TypeError("Is_long must be boolean!")
        self.__is_long = is_long
        if strandedness not in valid_strands:
            raise ValueError("Strandedness must be one of: {}".format(self.valid_strands)

        self.__strandedness = strandedness

    @property
    def read1(self):
        return read1

    @property
    def read2(self):
        return read2

    @property
    def is_paired(self):
        return (self.read2)

    @property
    def is_long(self):
        return self.__is_long

    @property
    def strandedness(self):
        return self.__strandedness



class AssemblyStorer:

    gtf_methods = ["cufflinks", "stringtie", "class", "scallop"]
    gff_methods = ["trinitydn", "trinitygg"]

    def __init__(self, samples, asm_dir):
        self.samples = dict()

        if not os.path.exists(asm_dir):
            os.makedirs(asm_dir)
        elif not os.path.isdir(asm_dir):
            raise TypeError("{} is not a directory".format(asm_dir))

        self.asm_dir = asm_dir

        for sample in samples:
            # Create a dictionary of samples
            self.samples[sample.sample] = sample

        self.asms = dict()

    def add_assemblers(self, config, AlignStorer):

        for asm in config["asm_methods"]:
            self.asms[asm] = list()
            for sample in self.samples:
                for aln in config["align_methods"]:
                    for aln_index in range(len(config["align_methods"][aln])):
                         for asm_index, asm_setting in enumerate(config["asm_methods"]):
                            self.asms.append((sample, aln, aln_index, asm_index, asm_setting))

    @property
    def transcript_array(self):
        array = odict()
        for asm in self.asms:
            if asm in self.gff_methods:
                suff = ".gff"
            elif asm in self.gtf_methods:
                suff = ".gtf"
            else:
                raise KeyError(asm)
            fname = "{}-{}-{}.{}".format(asm, ?, ?, suff)
            array.append(os.path.join(self.asm_dir,


        abv_aln_str = aln_abrv[aln] + samp_idx
			for gtf in GTF_ASSEMBLY_METHODS:
				for index, setting in enumerate(ASSEMBLY_METHODS[gtf]):
					filename = gtf + "-" + str(index) + "-" + aln_str + ".gtf"
					TRANSCRIPT_ARRAY.append(ASM_DIR + "/output/" + filename)
					LABEL_ARRAY.append(asm_abrv[gtf] + "-" + str(index) + "-" + abv_aln_str)
					if not SAMPLE_MAP[samp] == "fr-unstranded":
						SS_ARRAY.append(TRANSCRIPT_ARRAY[-1])
			for gff in GFF_ASSEMBLY_METHODS:
				for index, setting in enumerate(ASSEMBLY_METHODS[gff]):
					filename = gff + "-" + str(index) + "-" + aln_str + ".gff"
					TRANSCRIPT_ARRAY.append(ASM_DIR + "/output/" + filename)
					LABEL_ARRAY.append(asm_abrv[gff] + "-" + str(index) + "-" + abv_aln_str)
					if not SAMPLE_MAP[samp] == "fr-unstranded":
						SS_ARRAY.append(TRANSCRIPT_ARRAY[-1])


TRANSCRIPT_ARRAY=[]
LABEL_ARRAY=[]
SS_ARRAY=[]
for samp in SAMPLES:
	for aln in ALIGNMENT_METHODS:
		for aln_idx, setting in enumerate(ALIGNMENT_METHODS[aln]):
			samp_idx = "-" + samp + "-" + str(aln_idx)
			aln_str = aln + samp_idx
			abv_aln_str = aln_abrv[aln] + samp_idx
			for gtf in GTF_ASSEMBLY_METHODS:
				for index, setting in enumerate(ASSEMBLY_METHODS[gtf]):
					filename = gtf + "-" + str(index) + "-" + aln_str + ".gtf"
					TRANSCRIPT_ARRAY.append(ASM_DIR + "/output/" + filename)
					LABEL_ARRAY.append(asm_abrv[gtf] + "-" + str(index) + "-" + abv_aln_str)
					if not SAMPLE_MAP[samp] == "fr-unstranded":
						SS_ARRAY.append(TRANSCRIPT_ARRAY[-1])
			for gff in GFF_ASSEMBLY_METHODS:
				for index, setting in enumerate(ASSEMBLY_METHODS[gff]):
					filename = gff + "-" + str(index) + "-" + aln_str + ".gff"
					TRANSCRIPT_ARRAY.append(ASM_DIR + "/output/" + filename)
					LABEL_ARRAY.append(asm_abrv[gff] + "-" + str(index) + "-" + abv_aln_str)
					if not SAMPLE_MAP[samp] == "fr-unstranded":
						SS_ARRAY.append(TRANSCRIPT_ARRAY[-1])

TRANSCRIPTS_STR = ",".join(TRANSCRIPT_ARRAY)
LABEL_STR = ",".join(LABEL_ARRAY)
SS_STR = ",".join(SS_ARRAY)


ALIGN_DIR = os.path.join(OUT_DIR, "2-alignments")

ALIGN_RUNS = []
for aln in ALIGNMENT_METHODS:
	for samp in SAMPLES:
		for index, setting in enumerate(ALIGNMENT_METHODS[aln]):
			ALIGN_RUNS.append(aln+"-"+samp+"-"+str(index))


if "gmap" in ALIGNMENT_METHODS or "gsnap" in ALIGNMENT_METHODS:
  include: "gmap_index.smk"
  if "gsnap" in ALIGNMENT_METHODS:
    include: "gsnap.smk"

if "hisat2" in ALIGNMENT_METHODS:
  include: "hisat2.smk"

if "star" in ALIGNMENT_METHODS or "star_long" in ALIGNMENT_METHODS:
  include: "star_index.smk"
  if "star" in ALIGNMENT_METHODS:
    include: "star.smk"
  if "star_long" in ALIGNMENT_METHODS:
    include: "star_long.smk"

if "tophat2" in ALIGNMENT_METHODS:
  include: "tophat2.smk"

include: "bam_utils.smk"

rule asm_all:
	input: expand("{asm_run}.stats", asm_run=TRANSCRIPT_ARRAY)
	output:	ASM_DIR+"/output/all.done"
	threads: 1
	shell: "touch {output}"
